module.exports = {
  parser: '@typescript-eslint/parser',
  extends: [
    'plugin:react/recommended',
    'google',
    'plugin:@typescript-eslint/recommended',
  ],
  plugins: [
    'react',
    '@typescript-eslint',
    'unused-imports',
  ],
  env: {
    browser: true,
    es2021: true,
  },
  globals: {
    window: true,
  },
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  globals: {
    window: true,
  },
  rules: {
    'no-nested-ternary': 'error',
    'no-unused-vars': 'off',
    'unused-imports/no-unused-imports': 'error',
    'unused-imports/no-unused-vars': [
      'warn',
      { vars: 'all', varsIgnorePattern: '^_', args: 'after-used', argsIgnorePattern: '^_' },
    ],
    'no-multiple-empty-lines': ['warn', { max: 1 }],
    'react/jsx-wrap-multilines': ['warn', {
      declaration: 'parens',
      assignment: 'parens',
      return: 'parens',
      arrow: 'parens',
      condition: 'parens',
      logical: 'parens',
      prop: 'parens',
    }],
    'react/display-name': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/ban-types': 'off',
    '@typescript-eslint/camelcase': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-this-alias': 'off',
    '@typescript-eslint/no-unused-vars': 'error',
    'arrow-body-style': 'off',
    'arrow-parens': [
      'error',
      'always',
    ],
    'class-methods-use-this': 'off',
    'comma-dangle': [
      'error',
      {
        arrays: 'always-multiline',
        exports: 'always-multiline',
        functions: 'ignore',
        imports: 'always-multiline',
        objects: 'always-multiline',
      },
    ],
    'func-names': 'off',
    'function-paren-newline': 'off',
    'import/extensions': 'off',
    'import/no-unresolved': 'off',
    'import/prefer-default-export': 'off',
    indent: [
      'error',
      2,
    ],
    'jsx-a11y/no-static-element-interactions': 'off',
    'max-len': [
      1,
      {
        code: 100,
        ignoreComments: true,
        ignorePattern: '^(\\s*[a-zA-Z_]+: \'[^\']+\'[,;]*)|(.*interpolate.*)|(.*require.*)|(.*_\\.template.*)|(<svg .*)|(<rect .*)|(<polygon .*)$',
        ignoreRegExpLiterals: true,
        ignoreTrailingComments: true,
        ignoreUrls: true,
        tabWidth: 2,
      },
    ],
    'newline-per-chained-call': 'off',
    'no-console': 'warn',
    'no-invalid-this': 0,
    'no-mixed-operators': 'error',
    'no-multiple-empty-lines': [
      'warn',
      {
        max: 1,
      },
    ],
    'no-nested-ternary': 'error',
    'no-param-reassign': 'error',
    'no-plusplus': 'error',
    'no-underscore-dangle': 'off',
    'no-unused-vars': 'off',
    'object-curly-spacing': [
      'warn',
      'always',
    ],
    'prefer-promise-reject-errors': 'off',
    'quote-props': [
      'error',
      'as-needed',
    ],
    quotes: [
      'error',
      'single',
    ],
    radix: [
      1,
      'as-needed',
    ],
    'react/destructuring-assignment': 'off',
    'react/display-name': 'off',
    'react/forbid-prop-types': 'off',
    'react/jsx-no-bind': 'off',
    'react/jsx-wrap-multilines': [
      'warn',
      {
        arrow: 'parens',
        assignment: 'parens',
        condition: 'parens',
        declaration: 'parens',
        logical: 'parens',
        prop: 'parens',
        return: 'parens',
      },
    ],
    'react/no-danger': 'off',
    'react/no-find-dom-node': 'off',
    'react/prefer-stateless-function': 'off',
    'react/require-default-props': 'off',
    'react/sort-comp': [
      'warn',
      {
        groups: {
          lifecycle: [
            'statics',
            'displayName',
            'propTypes',
            'contextTypes',
            'childContextTypes',
            'mixins',
            'defaultProps',
            'constructor',
            'getDefaultProps',
            'state',
            'getInitialState',
            'getChildContext',
            'getDerivedStateFromProps',
            'componentWillMount',
            'UNSAFE_componentWillMount',
            'componentDidMount',
            'componentWillReceiveProps',
            'UNSAFE_componentWillReceiveProps',
            'shouldComponentUpdate',
            'componentWillUpdate',
            'UNSAFE_componentWillUpdate',
            'getSnapshotBeforeUpdate',
            'componentDidUpdate',
            'componentDidCatch',
            'componentWillUnmount',
          ],
        },
        order: [
          'static-methods',
          'instance-variables',
          'lifecycle',
          'everything-else',
          'render',
        ],
      },
    ],
    'require-jsdoc': 'off',
    semi: [
      'error',
      'always',
    ],
    'unused-imports/no-unused-imports': 'error',
    'unused-imports/no-unused-vars': [
      'warn',
      {
        args: 'after-used',
        argsIgnorePattern: '^_',
        vars: 'all',
        varsIgnorePattern: '^_',
      },
    ],
    'valid-jsdoc': 'off',
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
};
