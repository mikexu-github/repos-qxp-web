import React from 'react';
import { FormItem } from '@formily/antd';
import Icon from '@c/icon';
import DndWrapper from './DndWrapper';
import { useFormBuilderContext } from './context';
import { createTooltipLabel } from './utils';

type ElementRendererProps = {
  id: string;
  className: string;
  index: number;
  path: string;
  item: any;
  children?: any;
  formAttrs: any;
};

const ElementRenderer = (
  { id, item, className, index, path, children, formAttrs }: ElementRendererProps,
) => {
  const { registry } = useFormBuilderContext();
  const isWrapper = registry.wrapperElements.indexOf(item.component) >= 0;
  const EditModeComponent = registry.getFormEditComponent(item.component);
  if (EditModeComponent) {
    return (
      <EditModeComponent id={id} item={item} className={className} path={path} index={index}>
        {children}
      </EditModeComponent>
    );
  }
  let component = registry.getFormComponent(item.component);
  const { label, name, required, help, readOnly, prefix, suffix, ...restProps } = item.props;
  // special case
  const addon: { prefix?: React.ReactChild | null; suffix?: React.ReactChild | null } = {};
  if (prefix) {
    addon.prefix = <Icon name={prefix} />;
  } else {
    addon.prefix = null;
  }
  if (suffix) {
    addon.suffix = <Icon name={suffix} />;
  } else {
    addon.suffix = null;
  }
  // special case for time-picker
  if (restProps.rangePicker && item.component === 'TimePicker') {
    component = registry.getFormComponent('TimeRangePicker');
  }
  let megaProps = {};
  const { span } = restProps;
  if (span) {
    megaProps = { span };
  } else {
    megaProps = {};
  }

  const labelEl = formAttrs.helpInLabel && label && help ? createTooltipLabel(label, help) : label;
  const helpEl = !formAttrs.helpInLabel && help ? help : null;

  return (
    <DndWrapper
      id={id}
      item={item}
      className={className}
      path={path}
      index={index}
      isWrapper={isWrapper}
    >
      <FormItem
        type="string"
        label={labelEl}
        key={id}
        name={name || id}
        component={component}
        required={required}
        editable={!readOnly}
        mega-props={megaProps}
        help={helpEl}
        {...restProps}
        {...addon}
      />
    </DndWrapper>
  );
};

export default ElementRenderer;
